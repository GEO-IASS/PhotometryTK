// __BEGIN_LICENSE__
// Copyright (C) 2006-2011 United States Government as represented by
// the Administrator of the National Aeronautics and Space Administration.
// All Rights Reserved.
// __END_LICENSE__


package asp.pho;

message ProjectMeta {
    optional string name = 1; // Optional Description

    // Properties of the run
    optional int32 max_iterations = 2 [default=100];
    optional int32 current_iteration = 3 [default=0];
    enum ReflectanceType {
        NONE = 0;
        LAMBERTIAN = 1;
        LUNARL_GASKALL = 2;
        LUNARL_MCEWEN = 3;
    }
    required ReflectanceType reflectance = 4 [default=NONE];
    optional double rel_tol = 5 [default=1e-2]; // Minimum improvement between
                                                // iterations
    optional double abs_tol = 6 [default=1e-2]; // Absolute shut off  of error

    required int32 num_cameras = 7;

    optional string plate_manager = 8 [default="equi"];
    optional string datum_name = 9 [default="WGS84"];
    required double min_pixval = 10 [default=0]; // Update this so we can normalize at the end
    required double max_pixval = 11 [default=0]; // Update this so we can normalize at the end
    repeated double min_pixval_vec = 13;
    repeated double max_pixval_vec = 14;
}

message CameraMeta {
    required string name = 1;
    required double exposure_t = 2;
    optional double ephemeris_t = 3;
    optional int32 base_transaction_id = 4;
    repeated double sun_vec = 5;
    repeated double cam_vec = 6;
    required double init_error = 7;
    required double last_error = 8;
    required double curr_error = 9;
}

// Project File Service
// ------------------------------------------------

message ProjectOpenRequest {
  required string name = 1;
}
message ProjectOpenReply {
  required ProjectMeta meta = 1;
  required int32 project_id = 2;
}

message IterationUpdateRequest {
  required int32 project_id = 1;
  required int32 iteration = 2;
}

message IterationUpdateReply {
  required int32 project_id = 1;
}

message InitErrorUpdateRequest {
  required int32 project_id = 1;
  required double init_error = 2;
}

message InitErrorUpdateReply {
  required int32 project_id = 1;
}

message LastErrorUpdateRequest {
  required int32 project_id = 1;
  required double last_error = 2;
}

message LastErrorUpdateReply {
  required int32 project_id = 1;
}

message PixvalAddRequest {
  required int32 project_id = 1;
  required double min_pixval = 2;
  required double max_pixval = 3;
}

message PixvalAddReply {
  required int32 project_id = 1;
}

message PixvalGetAndResetRequest {
  required int32 project_id = 1;
}

message PixvalGetAndResetReply {
  required int32 project_id = 1;
  required double min_pixval = 2;
  required double max_pixval = 3;
}

message CameraCreateRequest {
  required int32 project_id = 1;
  required CameraMeta meta = 2;
}
message CameraCreateReply {
  required int32 project_id = 1; // echo if success
  required int32 camera_id = 2;  // assigns number
}

message CameraReadRequest {
  required int32 project_id = 1;
  required int32 camera_id = 2;
}
message CameraReadReply {
  required int32 project_id = 1; // echo if success
  required int32 camera_id = 2;  // echo if success
  required CameraMeta meta = 3;
}

message CameraWriteRequest {
  required int32 project_id = 1;
  required int32 camera_id  = 2;
  required CameraMeta meta  = 3;
}
message CameraWriteReply {
  required int32 project_id = 1; // echo if success
  required int32 camera_id  = 2; // echo if success
}

option cc_generic_services = true;

service ProjectService {
  // Project start
  rpc OpenRequest (ProjectOpenRequest) returns (ProjectOpenReply);

  // Project Interface
  rpc IterationUpdate (IterationUpdateRequest) returns (IterationUpdateReply);
  rpc InitErrorUpdate (InitErrorUpdateRequest) returns (InitErrorUpdateReply);
  rpc LastErrorUpdate (LastErrorUpdateRequest) returns (LastErrorUpdateReply);

  // Max/min pixval Interface
  rpc PixvalAdd (PixvalAddRequest) returns (PixvalAddReply);
  rpc PixvalGetAndReset (PixvalGetAndResetRequest) returns (PixvalGetAndResetReply);

  // Camera Interface
  rpc CameraCreate (CameraCreateRequest) returns (CameraCreateReply);
  rpc CameraRead (CameraReadRequest) returns (CameraReadReply);
  rpc CameraWrite (CameraWriteRequest) returns (CameraWriteReply);
}